[build-system]
build-backend = "poetry.core.masonry.api"
requires = [
  "poetry-core>=1",
]

[tool.poetry]
name = "aqt-pennylane-examples"
version = "0.1.0"
description = "Pennylane examples with AQT backends."
authors = [ "Alpine Quantum Technologies GmbH" ]
repository = "https://github.com/alpine-quantum-technologies/quantum-sdks-examples/"
readme = "README.md"
license = "Apache-2.0"
classifiers = [
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: MacOS",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
]
keywords = [ "pennylane", "sdk", "quantum" ]

include = [
  "README.md",
]

[tool.poetry.dependencies]
python = ">=3.11,<3.13"

qiskit-aqt-provider = { version = ">=1", extras = [ "test" ] }
pennylane-qiskit = "=0.36.0"

[tool.poetry.group.dev.dependencies]
mypy = "^1.15.0"
panflute = "=1.12.5"   # use legacy pandoc-types because of old Ubuntu package
poethepoet = "^0.33.0"
pre-commit = "^4"
pyproject-fmt = "^2"
pytest = ">=8"
pytest-sugar = "^1"
ruff = "^0.11.0"

[tool.ruff]
target-version = "py311"

line-length = 100

lint.select = [
  "ARG", # flake8-unused-arguments
  "BLE", # flake8-blind-except
  "C4",  # flake8-comprehensions
  "C90", # mccabe
  "D",   # pydocstyle
  "E",   # pycodestyle errors
  "ERA", # eradicate
  "F",   # pyflakes
  "I",   # isort
  "ICN", # flake8-import-conventions
  "ISC", # flake8-implicit-str-concat
  "NPY", # numpy
  "PGH", # pygrep-hooks
  "PIE", # flake8-pie
  "PT",  # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "PYI", # flake8-pyi
  "RET", # flake8-return
  "RSE", # flake8-raise
  "RUF", # ruff specials
  "S",   # flake8-bandit
  "SIM", # flake8-simplify
  "T10", # flake8-debugger
  "T20", # flake8-print
  "TID", # flake8-tidy-imports
  "UP",  # pyupgrade
  "W",   # pycodestyle warnings
]
lint.ignore = [
  "D100",   # missing docstring in public module
  "D101",   # missing docstring in public class
  "D102",   # missing docstring in public method
  "D104",   # missing docstring in public package
  "D107",   # missing docstring in __init__
  "D211",   # no-blank-line-before-class (incompatible with D203)
  "D213",   # multiline-summary-second-line (incompatible with D212)
  "S101",   # use of 'assert' detected
  "S311",   # suspicious-non-cryptographic-random-usage
  "SIM117", # multiple-with-statements
]
lint.pydocstyle.convention = "google"

[tool.pyright]
exclude = [
  "**/__pycache__",
  "**/.*",
  "docs/",
]

typeCheckingMode = "basic"
analyzeUnannotatedFunctions = false
reportShadowedImports = true
reportTypeCommentUsage = true
reportImportCycles = false
reportMissingImports = false
reportMissingTypeStubs = false
reportConstantRedefinition = true
reportUnnecessaryTypeIgnoreComment = false

reportDuplicateImport = "error"

pythonVersion = "3.11"
pythonPlatform = "Linux"

[tool.poe.tasks.format]
shell = """
ruff format .
pyproject-fmt .
"""

[tool.poe.tasks.ruff_format_check]
shell = "ruff format --check ."

[tool.poe.tasks.pyprojectfmt_check]
shell = "pyproject-fmt --check ."

[tool.poe.tasks.typecheck]
shell = "mypy ."

[tool.poe.tasks.ruff_check]
shell = "ruff check ."

[tool.poe.tasks.run_examples]
shell = "pytest ."

[tool.poe.tasks.check_readme_code]
shell = "pandoc README.md -F ../utils/run_embedded_python_code.py > /dev/null"

[tool.poe.tasks]
lint = [ "ruff_check" ]
format_check = [ "ruff_format_check", "pyprojectfmt_check" ]
test = [ "run_examples", "check_readme_code" ]
all = [ "format_check", "lint", "typecheck", "test" ]
